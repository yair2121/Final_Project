{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';module.exports=Writable;/* <replacement> */function WriteReq(chunk,encoding,cb){this.chunk=chunk;this.encoding=encoding;this.callback=cb;this.next=null;}// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state){var _this=this;this.next=null;this.entry=null;this.finish=function(){onCorkedFinish(_this,state);};}/* </replacement> */ /*<replacement>*/var Duplex;/*</replacement>*/Writable.WritableState=WritableState;/*<replacement>*/var internalUtil={deprecate:require('util-deprecate')};/*</replacement>*/ /*<replacement>*/var Stream=require('./internal/streams/stream');/*</replacement>*/var Buffer=require('buffer').Buffer;var OurUint8Array=global.Uint8Array||function(){};function _uint8ArrayToBuffer(chunk){return Buffer.from(chunk);}function _isUint8Array(obj){return Buffer.isBuffer(obj)||obj instanceof OurUint8Array;}var destroyImpl=require('./internal/streams/destroy');var _require=require('./internal/streams/state'),getHighWaterMark=_require.getHighWaterMark;var _require$codes=require('../errors').codes,ERR_INVALID_ARG_TYPE=_require$codes.ERR_INVALID_ARG_TYPE,ERR_METHOD_NOT_IMPLEMENTED=_require$codes.ERR_METHOD_NOT_IMPLEMENTED,ERR_MULTIPLE_CALLBACK=_require$codes.ERR_MULTIPLE_CALLBACK,ERR_STREAM_CANNOT_PIPE=_require$codes.ERR_STREAM_CANNOT_PIPE,ERR_STREAM_DESTROYED=_require$codes.ERR_STREAM_DESTROYED,ERR_STREAM_NULL_VALUES=_require$codes.ERR_STREAM_NULL_VALUES,ERR_STREAM_WRITE_AFTER_END=_require$codes.ERR_STREAM_WRITE_AFTER_END,ERR_UNKNOWN_ENCODING=_require$codes.ERR_UNKNOWN_ENCODING;var errorOrDestroy=destroyImpl.errorOrDestroy;require('inherits')(Writable,Stream);function nop(){}function WritableState(options,stream,isDuplex){Duplex=Duplex||require('./_stream_duplex');options=options||{};// Duplex streams are both readable and writable, but share\n// the same options object.\n// However, some cases require setting options to different\n// values for the readable and the writable sides of the duplex stream,\n// e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\nif(typeof isDuplex!=='boolean')isDuplex=stream instanceof Duplex;// object stream flag to indicate whether or not this stream\n// contains buffers or objects.\nthis.objectMode=!!options.objectMode;if(isDuplex)this.objectMode=this.objectMode||!!options.writableObjectMode;// the point at which write() starts returning false\n// Note: 0 is a valid value, means that we always return false if\n// the entire buffer is not flushed immediately on write()\nthis.highWaterMark=getHighWaterMark(this,options,'writableHighWaterMark',isDuplex);// if _final has been called\nthis.finalCalled=false;// drain event flag.\nthis.needDrain=false;// at the start of calling end()\nthis.ending=false;// when end() has been called, and returned\nthis.ended=false;// when 'finish' is emitted\nthis.finished=false;// has it been destroyed\nthis.destroyed=false;// should we decode strings into buffers before passing to _write?\n// this is here so that some node-core streams can optimize string\n// handling at a lower level.\nvar noDecode=options.decodeStrings===false;this.decodeStrings=!noDecode;// Crypto is kind of old and crusty.  Historically, its default string\n// encoding is 'binary' so we have to make this configurable.\n// Everything else in the universe uses 'utf8', though.\nthis.defaultEncoding=options.defaultEncoding||'utf8';// not an actual buffer we keep track of, but a measurement\n// of how much we're waiting to get pushed to some underlying\n// socket or file.\nthis.length=0;// a flag to see when we're in the middle of a write.\nthis.writing=false;// when true all writes will be buffered until .uncork() call\nthis.corked=0;// a flag to be able to tell if the onwrite cb is called immediately,\n// or on a later tick.  We set this to true at first, because any\n// actions that shouldn't happen until \"later\" should generally also\n// not happen before the first write call.\nthis.sync=true;// a flag to know if we're processing previously buffered items, which\n// may call the _write() callback in the same tick, so that we don't\n// end up in an overlapped onwrite situation.\nthis.bufferProcessing=false;// the callback that's passed to _write(chunk,cb)\nthis.onwrite=function(er){onwrite(stream,er);};// the callback that the user supplies to write(chunk,encoding,cb)\nthis.writecb=null;// the amount that is being written when _write is called.\nthis.writelen=0;this.bufferedRequest=null;this.lastBufferedRequest=null;// number of pending user-supplied write callbacks\n// this must be 0 before 'finish' can be emitted\nthis.pendingcb=0;// emit prefinish if the only thing we're waiting for is _write cbs\n// This is relevant for synchronous Transform streams\nthis.prefinished=false;// True if the error was already emitted and should not be thrown again\nthis.errorEmitted=false;// Should close be emitted on destroy. Defaults to true.\nthis.emitClose=options.emitClose!==false;// Should .destroy() be called after 'finish' (and potentially 'end')\nthis.autoDestroy=!!options.autoDestroy;// count buffered requests\nthis.bufferedRequestCount=0;// allocate the first CorkedRequest, there is always\n// one allocated and free to use, and we maintain at most two\nthis.corkedRequestsFree=new CorkedRequest(this);}WritableState.prototype.getBuffer=function getBuffer(){var current=this.bufferedRequest;var out=[];while(current){out.push(current);current=current.next;}return out;};(function(){try{Object.defineProperty(WritableState.prototype,'buffer',{get:internalUtil.deprecate(function writableStateBufferGetter(){return this.getBuffer();},'_writableState.buffer is deprecated. Use _writableState.getBuffer '+'instead.','DEP0003')});}catch(_){}})();// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;if(typeof Symbol==='function'&&Symbol.hasInstance&&typeof Function.prototype[Symbol.hasInstance]==='function'){realHasInstance=Function.prototype[Symbol.hasInstance];Object.defineProperty(Writable,Symbol.hasInstance,{value:function value(object){if(realHasInstance.call(this,object))return true;if(this!==Writable)return false;return object&&object._writableState instanceof WritableState;}});}else{realHasInstance=function realHasInstance(object){return object instanceof this;};}function Writable(options){Duplex=Duplex||require('./_stream_duplex');// Writable ctor is applied to Duplexes, too.\n// `realHasInstance` is necessary because using plain `instanceof`\n// would return false, as no `_writableState` property is attached.\n// Trying to use the custom `instanceof` for Writable here will also break the\n// Node.js LazyTransform implementation, which has a non-trivial getter for\n// `_writableState` that would lead to infinite recursion.\n// Checking for a Stream.Duplex instance is faster here instead of inside\n// the WritableState constructor, at least with V8 6.5\nvar isDuplex=this instanceof Duplex;if(!isDuplex&&!realHasInstance.call(Writable,this))return new Writable(options);this._writableState=new WritableState(options,this,isDuplex);// legacy.\nthis.writable=true;if(options){if(typeof options.write==='function')this._write=options.write;if(typeof options.writev==='function')this._writev=options.writev;if(typeof options.destroy==='function')this._destroy=options.destroy;if(typeof options.final==='function')this._final=options.final;}Stream.call(this);}// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe=function(){errorOrDestroy(this,new ERR_STREAM_CANNOT_PIPE());};function writeAfterEnd(stream,cb){var er=new ERR_STREAM_WRITE_AFTER_END();// TODO: defer error events consistently everywhere, not just the cb\nerrorOrDestroy(stream,er);process.nextTick(cb,er);}// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream,state,chunk,cb){var er;if(chunk===null){er=new ERR_STREAM_NULL_VALUES();}else if(typeof chunk!=='string'&&!state.objectMode){er=new ERR_INVALID_ARG_TYPE('chunk',['string','Buffer'],chunk);}if(er){errorOrDestroy(stream,er);process.nextTick(cb,er);return false;}return true;}Writable.prototype.write=function(chunk,encoding,cb){var state=this._writableState;var ret=false;var isBuf=!state.objectMode&&_isUint8Array(chunk);if(isBuf&&!Buffer.isBuffer(chunk)){chunk=_uint8ArrayToBuffer(chunk);}if(typeof encoding==='function'){cb=encoding;encoding=null;}if(isBuf)encoding='buffer';else if(!encoding)encoding=state.defaultEncoding;if(typeof cb!=='function')cb=nop;if(state.ending)writeAfterEnd(this,cb);else if(isBuf||validChunk(this,state,chunk,cb)){state.pendingcb++;ret=writeOrBuffer(this,state,isBuf,chunk,encoding,cb);}return ret;};Writable.prototype.cork=function(){this._writableState.corked++;};Writable.prototype.uncork=function(){var state=this._writableState;if(state.corked){state.corked--;if(!state.writing&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest)clearBuffer(this,state);}};Writable.prototype.setDefaultEncoding=function setDefaultEncoding(encoding){// node::ParseEncoding() requires lower case.\nif(typeof encoding==='string')encoding=encoding.toLowerCase();if(!(['hex','utf8','utf-8','ascii','binary','base64','ucs2','ucs-2','utf16le','utf-16le','raw'].indexOf((encoding+'').toLowerCase())>-1))throw new ERR_UNKNOWN_ENCODING(encoding);this._writableState.defaultEncoding=encoding;return this;};Object.defineProperty(Writable.prototype,'writableBuffer',{// making it explicit this property is not enumerable\n// because otherwise some prototype manipulation in\n// userland will fail\nenumerable:false,get:function get(){return this._writableState&&this._writableState.getBuffer();}});function decodeChunk(state,chunk,encoding){if(!state.objectMode&&state.decodeStrings!==false&&typeof chunk==='string'){chunk=Buffer.from(chunk,encoding);}return chunk;}Object.defineProperty(Writable.prototype,'writableHighWaterMark',{// making it explicit this property is not enumerable\n// because otherwise some prototype manipulation in\n// userland will fail\nenumerable:false,get:function get(){return this._writableState.highWaterMark;}});// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream,state,isBuf,chunk,encoding,cb){if(!isBuf){var newChunk=decodeChunk(state,chunk,encoding);if(chunk!==newChunk){isBuf=true;encoding='buffer';chunk=newChunk;}}var len=state.objectMode?1:chunk.length;state.length+=len;var ret=state.length<state.highWaterMark;// we must ensure that previous needDrain will not be reset to false.\nif(!ret)state.needDrain=true;if(state.writing||state.corked){var last=state.lastBufferedRequest;state.lastBufferedRequest={chunk:chunk,encoding:encoding,isBuf:isBuf,callback:cb,next:null};if(last){last.next=state.lastBufferedRequest;}else{state.bufferedRequest=state.lastBufferedRequest;}state.bufferedRequestCount+=1;}else{doWrite(stream,state,false,len,chunk,encoding,cb);}return ret;}function doWrite(stream,state,writev,len,chunk,encoding,cb){state.writelen=len;state.writecb=cb;state.writing=true;state.sync=true;if(state.destroyed)state.onwrite(new ERR_STREAM_DESTROYED('write'));else if(writev)stream._writev(chunk,state.onwrite);else stream._write(chunk,encoding,state.onwrite);state.sync=false;}function onwriteError(stream,state,sync,er,cb){--state.pendingcb;if(sync){// defer the callback if we are being called synchronously\n// to avoid piling up things on the stack\nprocess.nextTick(cb,er);// this can emit finish, and it will always happen\n// after error\nprocess.nextTick(finishMaybe,stream,state);stream._writableState.errorEmitted=true;errorOrDestroy(stream,er);}else{// the caller expect this to happen before if\n// it is async\ncb(er);stream._writableState.errorEmitted=true;errorOrDestroy(stream,er);// this can emit finish, but finish must\n// always follow error\nfinishMaybe(stream,state);}}function onwriteStateUpdate(state){state.writing=false;state.writecb=null;state.length-=state.writelen;state.writelen=0;}function onwrite(stream,er){var state=stream._writableState;var sync=state.sync;var cb=state.writecb;if(typeof cb!=='function')throw new ERR_MULTIPLE_CALLBACK();onwriteStateUpdate(state);if(er)onwriteError(stream,state,sync,er,cb);else{// Check if we're actually ready to finish, but don't emit yet\nvar finished=needFinish(state)||stream.destroyed;if(!finished&&!state.corked&&!state.bufferProcessing&&state.bufferedRequest){clearBuffer(stream,state);}if(sync){process.nextTick(afterWrite,stream,state,finished,cb);}else{afterWrite(stream,state,finished,cb);}}}function afterWrite(stream,state,finished,cb){if(!finished)onwriteDrain(stream,state);state.pendingcb--;cb();finishMaybe(stream,state);}// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream,state){if(state.length===0&&state.needDrain){state.needDrain=false;stream.emit('drain');}}// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream,state){state.bufferProcessing=true;var entry=state.bufferedRequest;if(stream._writev&&entry&&entry.next){// Fast case, write everything using _writev()\nvar l=state.bufferedRequestCount;var buffer=new Array(l);var holder=state.corkedRequestsFree;holder.entry=entry;var count=0;var allBuffers=true;while(entry){buffer[count]=entry;if(!entry.isBuf)allBuffers=false;entry=entry.next;count+=1;}buffer.allBuffers=allBuffers;doWrite(stream,state,true,state.length,buffer,'',holder.finish);// doWrite is almost always async, defer these to save a bit of time\n// as the hot path ends with doWrite\nstate.pendingcb++;state.lastBufferedRequest=null;if(holder.next){state.corkedRequestsFree=holder.next;holder.next=null;}else{state.corkedRequestsFree=new CorkedRequest(state);}state.bufferedRequestCount=0;}else{// Slow case, write chunks one-by-one\nwhile(entry){var chunk=entry.chunk;var encoding=entry.encoding;var cb=entry.callback;var len=state.objectMode?1:chunk.length;doWrite(stream,state,false,len,chunk,encoding,cb);entry=entry.next;state.bufferedRequestCount--;// if we didn't call the onwrite immediately, then\n// it means that we need to wait until it does.\n// also, that means that the chunk and cb are currently\n// being processed, so move the buffer counter past them.\nif(state.writing){break;}}if(entry===null)state.lastBufferedRequest=null;}state.bufferedRequest=entry;state.bufferProcessing=false;}Writable.prototype._write=function(chunk,encoding,cb){cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));};Writable.prototype._writev=null;Writable.prototype.end=function(chunk,encoding,cb){var state=this._writableState;if(typeof chunk==='function'){cb=chunk;chunk=null;encoding=null;}else if(typeof encoding==='function'){cb=encoding;encoding=null;}if(chunk!==null&&chunk!==undefined)this.write(chunk,encoding);// .end() fully uncorks\nif(state.corked){state.corked=1;this.uncork();}// ignore unnecessary end() calls.\nif(!state.ending)endWritable(this,state,cb);return this;};Object.defineProperty(Writable.prototype,'writableLength',{// making it explicit this property is not enumerable\n// because otherwise some prototype manipulation in\n// userland will fail\nenumerable:false,get:function get(){return this._writableState.length;}});function needFinish(state){return state.ending&&state.length===0&&state.bufferedRequest===null&&!state.finished&&!state.writing;}function callFinal(stream,state){stream._final(function(err){state.pendingcb--;if(err){errorOrDestroy(stream,err);}state.prefinished=true;stream.emit('prefinish');finishMaybe(stream,state);});}function prefinish(stream,state){if(!state.prefinished&&!state.finalCalled){if(typeof stream._final==='function'&&!state.destroyed){state.pendingcb++;state.finalCalled=true;process.nextTick(callFinal,stream,state);}else{state.prefinished=true;stream.emit('prefinish');}}}function finishMaybe(stream,state){var need=needFinish(state);if(need){prefinish(stream,state);if(state.pendingcb===0){state.finished=true;stream.emit('finish');if(state.autoDestroy){// In case of duplex streams we need a way to detect\n// if the readable side is ready for autoDestroy as well\nvar rState=stream._readableState;if(!rState||rState.autoDestroy&&rState.endEmitted){stream.destroy();}}}}return need;}function endWritable(stream,state,cb){state.ending=true;finishMaybe(stream,state);if(cb){if(state.finished)process.nextTick(cb);else stream.once('finish',cb);}state.ended=true;stream.writable=false;}function onCorkedFinish(corkReq,state,err){var entry=corkReq.entry;corkReq.entry=null;while(entry){var cb=entry.callback;state.pendingcb--;cb(err);entry=entry.next;}// reuse the free corkReq.\nstate.corkedRequestsFree.next=corkReq;}Object.defineProperty(Writable.prototype,'destroyed',{// making it explicit this property is not enumerable\n// because otherwise some prototype manipulation in\n// userland will fail\nenumerable:false,get:function get(){if(this._writableState===undefined){return false;}return this._writableState.destroyed;},set:function set(value){// we ignore the value if the stream\n// has not been initialized yet\nif(!this._writableState){return;}// backward compatibility, the user is explicitly\n// managing destroyed\nthis._writableState.destroyed=value;}});Writable.prototype.destroy=destroyImpl.destroy;Writable.prototype._undestroy=destroyImpl.undestroy;Writable.prototype._destroy=function(err,cb){cb(err);};","map":{"version":3,"names":["module","exports","Writable","WriteReq","chunk","encoding","cb","callback","next","CorkedRequest","state","_this","entry","finish","onCorkedFinish","Duplex","WritableState","internalUtil","deprecate","require","Stream","Buffer","OurUint8Array","global","Uint8Array","_uint8ArrayToBuffer","from","_isUint8Array","obj","isBuffer","destroyImpl","_require","getHighWaterMark","_require$codes","codes","ERR_INVALID_ARG_TYPE","ERR_METHOD_NOT_IMPLEMENTED","ERR_MULTIPLE_CALLBACK","ERR_STREAM_CANNOT_PIPE","ERR_STREAM_DESTROYED","ERR_STREAM_NULL_VALUES","ERR_STREAM_WRITE_AFTER_END","ERR_UNKNOWN_ENCODING","errorOrDestroy","nop","options","stream","isDuplex","objectMode","writableObjectMode","highWaterMark","finalCalled","needDrain","ending","ended","finished","destroyed","noDecode","decodeStrings","defaultEncoding","length","writing","corked","sync","bufferProcessing","onwrite","er","writecb","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","errorEmitted","emitClose","autoDestroy","bufferedRequestCount","corkedRequestsFree","prototype","getBuffer","current","out","push","Object","defineProperty","get","writableStateBufferGetter","_","realHasInstance","Symbol","hasInstance","Function","value","object","call","_writableState","writable","write","_write","writev","_writev","destroy","_destroy","final","_final","pipe","writeAfterEnd","process","nextTick","validChunk","ret","isBuf","writeOrBuffer","cork","uncork","clearBuffer","setDefaultEncoding","toLowerCase","indexOf","enumerable","decodeChunk","newChunk","len","last","doWrite","onwriteError","finishMaybe","onwriteStateUpdate","needFinish","afterWrite","onwriteDrain","emit","l","buffer","Array","holder","count","allBuffers","end","undefined","endWritable","callFinal","err","prefinish","need","rState","_readableState","endEmitted","once","corkReq","set","_undestroy","undestroy"],"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/browserify-sign/node_modules/readable-stream/lib/_stream_writable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}