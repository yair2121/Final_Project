{"ast":null,"code":"var randomBytes=require('randombytes');module.exports=findPrime;findPrime.simpleSieve=simpleSieve;findPrime.fermatTest=fermatTest;var BN=require('bn.js');var TWENTYFOUR=new BN(24);var MillerRabin=require('miller-rabin');var millerRabin=new MillerRabin();var ONE=new BN(1);var TWO=new BN(2);var FIVE=new BN(5);var SIXTEEN=new BN(16);var EIGHT=new BN(8);var TEN=new BN(10);var THREE=new BN(3);var SEVEN=new BN(7);var ELEVEN=new BN(11);var FOUR=new BN(4);var TWELVE=new BN(12);var primes=null;function _getPrimes(){if(primes!==null)return primes;var limit=0x100000;var res=[];res[0]=2;for(var i=1,k=3;k<limit;k+=2){var sqrt=Math.ceil(Math.sqrt(k));for(var j=0;j<i&&res[j]<=sqrt;j++)if(k%res[j]===0)break;if(i!==j&&res[j]<=sqrt)continue;res[i++]=k;}primes=res;return res;}function simpleSieve(p){var primes=_getPrimes();for(var i=0;i<primes.length;i++)if(p.modn(primes[i])===0){if(p.cmpn(primes[i])===0){return true;}else{return false;}}return true;}function fermatTest(p){var red=BN.mont(p);return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1)===0;}function findPrime(bits,gen){if(bits<16){// this is what openssl does\nif(gen===2||gen===5){return new BN([0x8c,0x7b]);}else{return new BN([0x8c,0x27]);}}gen=new BN(gen);var num,n2;while(true){num=new BN(randomBytes(Math.ceil(bits/8)));while(num.bitLength()>bits){num.ishrn(1);}if(num.isEven()){num.iadd(ONE);}if(!num.testn(1)){num.iadd(TWO);}if(!gen.cmp(TWO)){while(num.mod(TWENTYFOUR).cmp(ELEVEN)){num.iadd(FOUR);}}else if(!gen.cmp(FIVE)){while(num.mod(TEN).cmp(THREE)){num.iadd(FOUR);}}n2=num.shrn(1);if(simpleSieve(n2)&&simpleSieve(num)&&fermatTest(n2)&&fermatTest(num)&&millerRabin.test(n2)&&millerRabin.test(num)){return num;}}}","map":{"version":3,"names":["randomBytes","require","module","exports","findPrime","simpleSieve","fermatTest","BN","TWENTYFOUR","MillerRabin","millerRabin","ONE","TWO","FIVE","SIXTEEN","EIGHT","TEN","THREE","SEVEN","ELEVEN","FOUR","TWELVE","primes","_getPrimes","limit","res","i","k","sqrt","Math","ceil","j","p","length","modn","cmpn","red","mont","toRed","redPow","subn","fromRed","bits","gen","num","n2","bitLength","ishrn","isEven","iadd","testn","cmp","mod","shrn","test"],"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/diffie-hellman/lib/generatePrime.js"],"sourcesContent":["var randomBytes = require('randombytes');\nmodule.exports = findPrime;\nfindPrime.simpleSieve = simpleSieve;\nfindPrime.fermatTest = fermatTest;\nvar BN = require('bn.js');\nvar TWENTYFOUR = new BN(24);\nvar MillerRabin = require('miller-rabin');\nvar millerRabin = new MillerRabin();\nvar ONE = new BN(1);\nvar TWO = new BN(2);\nvar FIVE = new BN(5);\nvar SIXTEEN = new BN(16);\nvar EIGHT = new BN(8);\nvar TEN = new BN(10);\nvar THREE = new BN(3);\nvar SEVEN = new BN(7);\nvar ELEVEN = new BN(11);\nvar FOUR = new BN(4);\nvar TWELVE = new BN(12);\nvar primes = null;\n\nfunction _getPrimes() {\n  if (primes !== null)\n    return primes;\n\n  var limit = 0x100000;\n  var res = [];\n  res[0] = 2;\n  for (var i = 1, k = 3; k < limit; k += 2) {\n    var sqrt = Math.ceil(Math.sqrt(k));\n    for (var j = 0; j < i && res[j] <= sqrt; j++)\n      if (k % res[j] === 0)\n        break;\n\n    if (i !== j && res[j] <= sqrt)\n      continue;\n\n    res[i++] = k;\n  }\n  primes = res;\n  return res;\n}\n\nfunction simpleSieve(p) {\n  var primes = _getPrimes();\n\n  for (var i = 0; i < primes.length; i++)\n    if (p.modn(primes[i]) === 0) {\n      if (p.cmpn(primes[i]) === 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  return true;\n}\n\nfunction fermatTest(p) {\n  var red = BN.mont(p);\n  return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;\n}\n\nfunction findPrime(bits, gen) {\n  if (bits < 16) {\n    // this is what openssl does\n    if (gen === 2 || gen === 5) {\n      return new BN([0x8c, 0x7b]);\n    } else {\n      return new BN([0x8c, 0x27]);\n    }\n  }\n  gen = new BN(gen);\n\n  var num, n2;\n\n  while (true) {\n    num = new BN(randomBytes(Math.ceil(bits / 8)));\n    while (num.bitLength() > bits) {\n      num.ishrn(1);\n    }\n    if (num.isEven()) {\n      num.iadd(ONE);\n    }\n    if (!num.testn(1)) {\n      num.iadd(TWO);\n    }\n    if (!gen.cmp(TWO)) {\n      while (num.mod(TWENTYFOUR).cmp(ELEVEN)) {\n        num.iadd(FOUR);\n      }\n    } else if (!gen.cmp(FIVE)) {\n      while (num.mod(TEN).cmp(THREE)) {\n        num.iadd(FOUR);\n      }\n    }\n    n2 = num.shrn(1);\n    if (simpleSieve(n2) && simpleSieve(num) &&\n      fermatTest(n2) && fermatTest(num) &&\n      millerRabin.test(n2) && millerRabin.test(num)) {\n      return num;\n    }\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}