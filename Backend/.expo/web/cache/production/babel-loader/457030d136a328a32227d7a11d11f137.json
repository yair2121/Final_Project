{"ast":null,"code":"const EventEmitter=require(\"events\");const{games_dict}=require(\"../Games/Games_Dictionary\");const{GameSessionServer}=require(\"../sessions/game_session/GameSessionServer\");const{v1:uuidv1}=require(\"uuid\");/**\n * Manage games sessions and forwards clients to relevant game sessions.\n */class SessionsController extends EventEmitter{constructor(){super();this.sessions={unready_sessions:{},full_sessions:{},active_sessions:{}};for(let game_name in games_dict){this.sessions.unready_sessions[game_name]={};this.sessions.full_sessions[game_name]={};this.sessions.active_sessions[game_name]={};}}/**\n   * Get Session of given session id.\n   * @param {string} session_id.\n   * @returns TODO: return socket io for the client.\n   * @throws When session_id does not exist.\n   * @throws When game_name does not exist.\n   */#get_session(game_name,session_id){if(!(game_name in games_dict)){throw game_name+\" game does not exist\";}let container=null;let session=null;if(session_id in this.sessions.unready_sessions[game_name]){container=this.sessions.unready_sessions;session=this.sessions.unready_sessions[game_name][session_id];}else if(session_id in this.sessions.full_sessions[game_name]){container=this.sessions.full_sessions;session=this.sessions.full_sessions[game_name][session_id];}else if(session_id in this.sessions.active_sessions[game_name]){container=this.sessions.active_sessions;session=this.sessions.active_sessions[game_name][session_id];}if(container===null){// throw (session_id, this.sessions);\nconsole.log(session_id);throw\"session_id does not exist\";}return{container:container,session:session};}/**\n   * Make move in specific session.\n   * @param {string} game_name\n   * @param {string} session_id\n   * @throws When session_id does not exist.\n   * @throws When game_name does not exist.\n   */make_move(game_name,session_id,move_description){this.#get_session(game_name,session_id).session.make_move(move_description);}/**\n   * Close session of given session id.\n   * @param {string} session_id.\n   * @throws When session_id does not exist.\n   * @throws When game_name does not exist.\n   */close_session(game_name,session_id){const{container}=this.#get_session(game_name,session_id);delete container[game_name][session_id];}/**\n   * Validate that given player request can be given.\n   * @param {string} player_id- id of player.\n   * @param {string} game_name- name of the game to connect the player.\n   * @throws When game_name does not exist.\n   */#validate_connect_player(player_id,game_name){if(!(game_name in games_dict)){throw game_name+\" game does not exist\";}}/**\n   * Add given player id to available game, will create a new session if necessary.\n   * @param {string} player_id- id of player.\n   * @param {string} game_name- name of the game to connect the player.\n   * @returns Socket io for the player to connect to. //TODO: return socket io\n   * @throws When game_name does not exist.\n   */connect_player(player_id,player_name,game_name){this.#validate_connect_player(player_id,game_name);const relevant_sessions=this.sessions.unready_sessions[game_name];for(const session_id in relevant_sessions){// Try to add player to session\ntry{relevant_sessions[session_id].add_player(player_id,player_name);return session_id;}catch(error){console.log(error);}}const session_id=this.#create_session(game_name);// Create new session because relevant session does not exist\nthis.sessions.unready_sessions[game_name][session_id].add_player(player_id,player_name);return session_id;}connect_to_session(player_id,player_name,session_id){if(session_id in unready_sessions){try{unready_sessions[session_id].add_player(player_id,player_name);return session_id;}catch(error){console.log(error);}}return-1;}#subscribe_game_session(game_session){game_session.on(\"Session started\",(game_state,game_name,session_id)=>{const{container,session}=this.#get_session(game_name,session_id);this.sessions.active_sessions[game_name][session_id]=session;delete container[game_name][session_id];this.emit(\"Session started\",game_state,session_id);});game_session.on(\"Session full\",(game_name,session_id)=>{this.sessions.full_sessions[game_name][session_id]=this.sessions.unready_sessions[game_name][session_id];delete this.sessions.unready_sessions[game_name][session_id];});game_session.on(\"Session ended\",(game_name,session_id)=>{this.close_session(game_name,session_id);this.emit(\"Session ended\",session_id);});game_session.on(\"Update session state\",(game_state,session_id)=>{this.emit(\"Update session state\",game_state,session_id);});game_session.on(\"Update session move\",(move_description,session_id)=>{this.emit(\"Update session move\",move_description,session_id);});}/**\n   * Create a new game session of game_name.\n   * @param {string} game_name-  Create new session of game_name.\n   * @returns session id of the created game session.\n   */#create_session(game_name){const database=null;//TODO: implement this\nconst session_id=uuidv1();const{model}=games_dict[game_name];const game_session=new GameSessionServer(session_id,new model(),database);this.#subscribe_game_session(game_session);this.sessions.unready_sessions[game_name][session_id]=game_session;return session_id;}}module.exports={SessionsController};","map":{"version":3,"names":["EventEmitter","require","games_dict","GameSessionServer","v1","uuidv1","SessionsController","constructor","sessions","unready_sessions","full_sessions","active_sessions","game_name","get_session","session_id","container","session","console","log","make_move","move_description","close_session","validate_connect_player","player_id","connect_player","player_name","relevant_sessions","add_player","error","create_session","connect_to_session","subscribe_game_session","game_session","on","game_state","emit","database","model","module","exports"],"sources":["/Users/yair/Desktop/university/Final_Project/Backend/sessions/SessionsController.js"],"sourcesContent":["const EventEmitter = require(\"events\");\nconst { games_dict } = require(\"../Games/Games_Dictionary\");\nconst {\n  GameSessionServer,\n} = require(\"../sessions/game_session/GameSessionServer\");\nconst { v1: uuidv1 } = require(\"uuid\");\n/**\n * Manage games sessions and forwards clients to relevant game sessions.\n */\nclass SessionsController extends EventEmitter {\n  constructor() {\n    super();\n    this.sessions = {\n      unready_sessions: {},\n      full_sessions: {},\n      active_sessions: {},\n    };\n    for (let game_name in games_dict) {\n      this.sessions.unready_sessions[game_name] = {};\n      this.sessions.full_sessions[game_name] = {};\n      this.sessions.active_sessions[game_name] = {};\n    }\n  }\n\n  /**\n   * Get Session of given session id.\n   * @param {string} session_id.\n   * @returns TODO: return socket io for the client.\n   * @throws When session_id does not exist.\n   * @throws When game_name does not exist.\n   */\n\n  #get_session(game_name, session_id) {\n    if (!(game_name in games_dict)) {\n      throw game_name + \" game does not exist\";\n    }\n    let container = null;\n    let session = null;\n    if (session_id in this.sessions.unready_sessions[game_name]) {\n      container = this.sessions.unready_sessions;\n      session = this.sessions.unready_sessions[game_name][session_id];\n    } else if (session_id in this.sessions.full_sessions[game_name]) {\n      container = this.sessions.full_sessions;\n      session = this.sessions.full_sessions[game_name][session_id];\n    } else if (session_id in this.sessions.active_sessions[game_name]) {\n      container = this.sessions.active_sessions;\n      session = this.sessions.active_sessions[game_name][session_id];\n    }\n    if (container === null) {\n      // throw (session_id, this.sessions);\n      console.log(session_id);\n      throw \"session_id does not exist\";\n    }\n    return {\n      container: container,\n      session: session,\n    };\n  }\n\n  /**\n   * Make move in specific session.\n   * @param {string} game_name\n   * @param {string} session_id\n   * @throws When session_id does not exist.\n   * @throws When game_name does not exist.\n   */\n  make_move(game_name, session_id, move_description) {\n    this.#get_session(game_name, session_id).session.make_move(\n      move_description\n    );\n  }\n\n  /**\n   * Close session of given session id.\n   * @param {string} session_id.\n   * @throws When session_id does not exist.\n   * @throws When game_name does not exist.\n   */\n  close_session(game_name, session_id) {\n    const { container } = this.#get_session(game_name, session_id);\n    delete container[game_name][session_id];\n  }\n\n  /**\n   * Validate that given player request can be given.\n   * @param {string} player_id- id of player.\n   * @param {string} game_name- name of the game to connect the player.\n   * @throws When game_name does not exist.\n   */\n  #validate_connect_player(player_id, game_name) {\n    if (!(game_name in games_dict)) {\n      throw game_name + \" game does not exist\";\n    }\n  }\n\n  /**\n   * Add given player id to available game, will create a new session if necessary.\n   * @param {string} player_id- id of player.\n   * @param {string} game_name- name of the game to connect the player.\n   * @returns Socket io for the player to connect to. //TODO: return socket io\n   * @throws When game_name does not exist.\n   */\n  connect_player(player_id, player_name, game_name) {\n    this.#validate_connect_player(player_id, game_name);\n    const relevant_sessions = this.sessions.unready_sessions[game_name];\n    for (const session_id in relevant_sessions) {\n      // Try to add player to session\n      try {\n        relevant_sessions[session_id].add_player(player_id, player_name);\n        return session_id;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    const session_id = this.#create_session(game_name); // Create new session because relevant session does not exist\n    this.sessions.unready_sessions[game_name][session_id].add_player(\n      player_id,\n      player_name\n    );\n    return session_id;\n  }\n\n  connect_to_session(player_id, player_name, session_id) {\n    if (session_id in unready_sessions) {\n      try {\n        unready_sessions[session_id].add_player(player_id, player_name);\n        return session_id;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    return -1;\n  }\n\n  #subscribe_game_session(game_session) {\n    game_session.on(\"Session started\", (game_state, game_name, session_id) => {\n      const { container, session } = this.#get_session(game_name, session_id);\n      this.sessions.active_sessions[game_name][session_id] = session;\n      delete container[game_name][session_id];\n      this.emit(\"Session started\", game_state, session_id);\n    });\n\n    game_session.on(\"Session full\", (game_name, session_id) => {\n      this.sessions.full_sessions[game_name][session_id] =\n        this.sessions.unready_sessions[game_name][session_id];\n      delete this.sessions.unready_sessions[game_name][session_id];\n    });\n\n    game_session.on(\"Session ended\", (game_name, session_id) => {\n      this.close_session(game_name, session_id);\n      this.emit(\"Session ended\", session_id);\n    });\n\n    game_session.on(\"Update session state\", (game_state, session_id) => {\n      this.emit(\"Update session state\", game_state, session_id);\n    });\n\n    game_session.on(\"Update session move\", (move_description, session_id) => {\n      this.emit(\"Update session move\", move_description, session_id);\n    });\n  }\n\n  /**\n   * Create a new game session of game_name.\n   * @param {string} game_name-  Create new session of game_name.\n   * @returns session id of the created game session.\n   */\n  #create_session(game_name) {\n    const database = null; //TODO: implement this\n    const session_id = uuidv1();\n    const { model } = games_dict[game_name];\n    const game_session = new GameSessionServer(\n      session_id,\n      new model(),\n      database\n    );\n    this.#subscribe_game_session(game_session);\n    this.sessions.unready_sessions[game_name][session_id] = game_session;\n    return session_id;\n  }\n}\n\nmodule.exports = { SessionsController };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}