{"ast":null,"code":"var asn1=require('./asn1');var aesid=require('./aesid.json');var fixProc=require('./fixProc');var ciphers=require('browserify-aes');var compat=require('pbkdf2');var Buffer=require('safe-buffer').Buffer;module.exports=parseKeys;function parseKeys(buffer){var password;if(typeof buffer==='object'&&!Buffer.isBuffer(buffer)){password=buffer.passphrase;buffer=buffer.key;}if(typeof buffer==='string'){buffer=Buffer.from(buffer);}var stripped=fixProc(buffer,password);var type=stripped.tag;var data=stripped.data;var subtype,ndata;switch(type){case'CERTIFICATE':ndata=asn1.certificate.decode(data,'der').tbsCertificate.subjectPublicKeyInfo;// falls through\ncase'PUBLIC KEY':if(!ndata){ndata=asn1.PublicKey.decode(data,'der');}subtype=ndata.algorithm.algorithm.join('.');switch(subtype){case'1.2.840.113549.1.1.1':return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data,'der');case'1.2.840.10045.2.1':ndata.subjectPrivateKey=ndata.subjectPublicKey;return{type:'ec',data:ndata};case'1.2.840.10040.4.1':ndata.algorithm.params.pub_key=asn1.DSAparam.decode(ndata.subjectPublicKey.data,'der');return{type:'dsa',data:ndata.algorithm.params};default:throw new Error('unknown key id '+subtype);}// throw new Error('unknown key type ' + type)\ncase'ENCRYPTED PRIVATE KEY':data=asn1.EncryptedPrivateKey.decode(data,'der');data=decrypt(data,password);// falls through\ncase'PRIVATE KEY':ndata=asn1.PrivateKey.decode(data,'der');subtype=ndata.algorithm.algorithm.join('.');switch(subtype){case'1.2.840.113549.1.1.1':return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey,'der');case'1.2.840.10045.2.1':return{curve:ndata.algorithm.curve,privateKey:asn1.ECPrivateKey.decode(ndata.subjectPrivateKey,'der').privateKey};case'1.2.840.10040.4.1':ndata.algorithm.params.priv_key=asn1.DSAparam.decode(ndata.subjectPrivateKey,'der');return{type:'dsa',params:ndata.algorithm.params};default:throw new Error('unknown key id '+subtype);}// throw new Error('unknown key type ' + type)\ncase'RSA PUBLIC KEY':return asn1.RSAPublicKey.decode(data,'der');case'RSA PRIVATE KEY':return asn1.RSAPrivateKey.decode(data,'der');case'DSA PRIVATE KEY':return{type:'dsa',params:asn1.DSAPrivateKey.decode(data,'der')};case'EC PRIVATE KEY':data=asn1.ECPrivateKey.decode(data,'der');return{curve:data.parameters.value,privateKey:data.privateKey};default:throw new Error('unknown key type '+type);}}parseKeys.signature=asn1.signature;function decrypt(data,password){var salt=data.algorithm.decrypt.kde.kdeparams.salt;var iters=parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(),10);var algo=aesid[data.algorithm.decrypt.cipher.algo.join('.')];var iv=data.algorithm.decrypt.cipher.iv;var cipherText=data.subjectPrivateKey;var keylen=parseInt(algo.split('-')[1],10)/8;var key=compat.pbkdf2Sync(password,salt,iters,keylen,'sha1');var cipher=ciphers.createDecipheriv(algo,key,iv);var out=[];out.push(cipher.update(cipherText));out.push(cipher.final());return Buffer.concat(out);}","map":{"version":3,"names":["asn1","require","aesid","fixProc","ciphers","compat","Buffer","module","exports","parseKeys","buffer","password","isBuffer","passphrase","key","from","stripped","type","tag","data","subtype","ndata","certificate","decode","tbsCertificate","subjectPublicKeyInfo","PublicKey","algorithm","join","RSAPublicKey","subjectPublicKey","subjectPrivateKey","params","pub_key","DSAparam","Error","EncryptedPrivateKey","decrypt","PrivateKey","RSAPrivateKey","curve","privateKey","ECPrivateKey","priv_key","DSAPrivateKey","parameters","value","signature","salt","kde","kdeparams","iters","parseInt","toString","algo","cipher","iv","cipherText","keylen","split","pbkdf2Sync","createDecipheriv","out","push","update","final","concat"],"sources":["/usr/local/lib/node_modules/expo-cli/node_modules/parse-asn1/index.js"],"sourcesContent":["var asn1 = require('./asn1')\nvar aesid = require('./aesid.json')\nvar fixProc = require('./fixProc')\nvar ciphers = require('browserify-aes')\nvar compat = require('pbkdf2')\nvar Buffer = require('safe-buffer').Buffer\nmodule.exports = parseKeys\n\nfunction parseKeys (buffer) {\n  var password\n  if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {\n    password = buffer.passphrase\n    buffer = buffer.key\n  }\n  if (typeof buffer === 'string') {\n    buffer = Buffer.from(buffer)\n  }\n\n  var stripped = fixProc(buffer, password)\n\n  var type = stripped.tag\n  var data = stripped.data\n  var subtype, ndata\n  switch (type) {\n    case 'CERTIFICATE':\n      ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo\n      // falls through\n    case 'PUBLIC KEY':\n      if (!ndata) {\n        ndata = asn1.PublicKey.decode(data, 'der')\n      }\n      subtype = ndata.algorithm.algorithm.join('.')\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der')\n        case '1.2.840.10045.2.1':\n          ndata.subjectPrivateKey = ndata.subjectPublicKey\n          return {\n            type: 'ec',\n            data: ndata\n          }\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der')\n          return {\n            type: 'dsa',\n            data: ndata.algorithm.params\n          }\n        default: throw new Error('unknown key id ' + subtype)\n      }\n      // throw new Error('unknown key type ' + type)\n    case 'ENCRYPTED PRIVATE KEY':\n      data = asn1.EncryptedPrivateKey.decode(data, 'der')\n      data = decrypt(data, password)\n      // falls through\n    case 'PRIVATE KEY':\n      ndata = asn1.PrivateKey.decode(data, 'der')\n      subtype = ndata.algorithm.algorithm.join('.')\n      switch (subtype) {\n        case '1.2.840.113549.1.1.1':\n          return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der')\n        case '1.2.840.10045.2.1':\n          return {\n            curve: ndata.algorithm.curve,\n            privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey\n          }\n        case '1.2.840.10040.4.1':\n          ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der')\n          return {\n            type: 'dsa',\n            params: ndata.algorithm.params\n          }\n        default: throw new Error('unknown key id ' + subtype)\n      }\n      // throw new Error('unknown key type ' + type)\n    case 'RSA PUBLIC KEY':\n      return asn1.RSAPublicKey.decode(data, 'der')\n    case 'RSA PRIVATE KEY':\n      return asn1.RSAPrivateKey.decode(data, 'der')\n    case 'DSA PRIVATE KEY':\n      return {\n        type: 'dsa',\n        params: asn1.DSAPrivateKey.decode(data, 'der')\n      }\n    case 'EC PRIVATE KEY':\n      data = asn1.ECPrivateKey.decode(data, 'der')\n      return {\n        curve: data.parameters.value,\n        privateKey: data.privateKey\n      }\n    default: throw new Error('unknown key type ' + type)\n  }\n}\nparseKeys.signature = asn1.signature\nfunction decrypt (data, password) {\n  var salt = data.algorithm.decrypt.kde.kdeparams.salt\n  var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10)\n  var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')]\n  var iv = data.algorithm.decrypt.cipher.iv\n  var cipherText = data.subjectPrivateKey\n  var keylen = parseInt(algo.split('-')[1], 10) / 8\n  var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1')\n  var cipher = ciphers.createDecipheriv(algo, key, iv)\n  var out = []\n  out.push(cipher.update(cipherText))\n  out.push(cipher.final())\n  return Buffer.concat(out)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}